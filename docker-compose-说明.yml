# https://www.jianshu.com/p/2217cfed29d7
version: '3'
services:
  some_service_name:
    image: xx:latest
    restart: always

    # 容器名（一般不用）
    container_name: app
    # 主机名，默认为some_service_name（一般不用）
    hostname: app

    # entrypoint及command参数如果没有[]括号，则默认是在“/bin/sh -c”shell下执行
    # 如果entrypoint没有[]，则command的参数将不会作为entrypoint的参数使用
    # 建议：两个都使用[]方式，entrypoint作为执行程序，command作为执行程序的参数，这样通过修改command以实现修改程序参数，当然也可以通过重新定义entrypoint来修改执行程序
    #
    # 覆盖Dockerfile中的定义（一般不用）
    entrypoint: ["/path/entrypoint.sh"]
    # 一般用于覆盖默认启动参数
    command: [bundle, exec, thin, -p, 3000]

    ports:
      - 8080:80

    networks:
      - front-web

    # /etc/hosts主机记录
    extra_hosts:
      - "somehost:162.242.195.82"

    # dns（一般不用）
    dns:
      - 8.8.8.8

    # 挂载临时目录到容器内部（一般不用）
    tmpfs:
      - /run
      - /tmp

    # 依赖
    depends_on:
      - db 

    # 连接独立运行的容器（一般不用）
    external_links:
      - redis_1

    # 变量
    environment:
      - SHOW=true
    # 变量文件，默认为当前目录下的.env文件
    env_file:
      - ./common.env

    # 卷
    volumes:
      # 以Compose配置文件为相对路径作为数据卷挂载到容器，ro：只读
      - ./cac:/tmp/cac:ro
      # 已经存在的命名的数据卷。
      - datavolume:/var/lib/mysql

    # 从其它容器或者服务挂载数据卷（一般不用）
    volumes_from:
      - service_name
      - service_name:ro
      - container:container_name
      - container:container_name:rw

    # 设备映射（一般不用）
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0"
    
    # 其他（一般不用）
    cpu_shares: 73
    cpu_quota: 50000
    cpuset: 0,1
    user: postgresql
    working_dir: /code
    domainname: foo.com
    hostname: foo
    ipc: host
    mac_address: 02:42:ac:11:65:43
    mem_limit: 1000000000
    memswap_limit: 2000000000
    privileged: true
    restart: always
    read_only: true
    shm_size: 64M
    stdin_open: true
    tty: true




